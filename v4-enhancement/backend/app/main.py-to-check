"""
FastAPI application entry point with complete integration.
Version: 2.0.0 - Production-ready with session externalization and distributed locking.
"""
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import logging
import asyncio
import sys
from typing import Any, Dict
from pathlib import Path

from .config import settings
from .api.routes import chat, sessions, health
from .api.websocket import websocket_endpoint
from .agents.chat_agent import CustomerSupportAgent
from .utils.telemetry import setup_telemetry, metrics_collector
from .utils.middleware import (
    RequestIDMiddleware,
    TimingMiddleware,
    RateLimitMiddleware,
    ErrorHandlingMiddleware
)
from .database import init_db, cleanup_db
from .services.cache_service import CacheService

# Configure structured logging
log_level = logging.DEBUG if settings.debug else logging.INFO

# Create logs directory
log_dir = Path("logs")
log_dir.mkdir(exist_ok=True)

# Configure logging with both console and file handlers
logging.basicConfig(
    level=log_level,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(log_dir / 'app.log', mode='a') if settings.environment != 'development' else logging.NullHandler()
    ]
)

logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Manage application lifecycle events.
    Initialize resources on startup, cleanup on shutdown.
    
    Version 2.0.0:
    - Session store initialization with Redis support
    - Distributed locking setup
    - Comprehensive health checks
    - Graceful shutdown with resource cleanup
    """
    # Startup
    startup_success = False
    
    try:
        logger.info("=" * 60)
        logger.info(f"Starting {settings.app_name} v{settings.app_version}")
        logger.info(f"Environment: {settings.environment}")
        logger.info(f"Debug Mode: {settings.debug}")
        logger.info("=" * 60)
        
        # Initialize database
        logger.info("Initializing database...")
        try:
            init_db()
            logger.info("✓ Database initialized")
        except Exception as e:
            logger.error(f"✗ Database initialization failed: {e}", exc_info=True)
            raise
        
        # Initialize cache service
        logger.info("Initializing cache service...")
        cache_service = CacheService()
        app.state.cache = cache_service
        
        # Test cache connection with better error handling
        cache_available = False
        try:
            if await cache_service.ping():
                logger.info("✓ Cache service connected")
                cache_available = True
            else:
                logger.warning("✗ Cache service unavailable - running without cache")
        except Exception as e:
            logger.warning(f"✗ Cache service unavailable - running without cache: {e}")
        
        # Initialize telemetry
        if settings.enable_telemetry:
            try:
                setup_telemetry(app)
                logger.info("✓ Telemetry initialized")
            except Exception as e:
                logger.warning(f"✗ Telemetry initialization failed: {e}")
        
        # Initialize the AI agent
        logger.info("Initializing AI agent...")
        logger.info(f"  - Tool registry mode: {getattr(settings, 'agent_tool_registry_mode', 'legacy')}")
        logger.info(f"  - Session store type: {settings.session_store_type.value}")
        logger.info(f"  - Distributed locking: {settings.session_locking_enabled}")
        logger.info(f"  - Session fingerprinting: {settings.session_fingerprinting_enabled}")
        logger.info(f"  - Session encryption: {settings.session_encryption_enabled}")
        
        try:
            agent = CustomerSupportAgent()
            
            # If using registry mode, initialize asynchronously
            if agent.use_registry:
                await agent.initialize_async()
            else:
                # Legacy mode already initialized in __init__
                pass
            
            app.state.agent = agent
            logger.info("✓ AI agent initialized successfully")
            
            # Log session store details
            session_store_type = type(agent.session_store).__name__
            logger.info(f"✓ Session store: {session_store_type}")
            
            # Log tool count
            logger.info(f"✓ Active tools: {len(agent.tools)}")
            for tool_name in agent.tools.keys():
                logger.info(f"  - {tool_name}")
            
        except Exception as e:
            logger.error(f"✗ Agent initialization failed: {e}", exc_info=True)
            raise
        
        # Add sample data to knowledge base (development only)
        if settings.environment == "development":
            try:
                await add_sample_knowledge(agent)
            except Exception as e:
                logger.warning(f"Failed to add sample knowledge: {e}")
        
        # Perform startup health checks
        try:
            await perform_startup_checks(app)
        except Exception as e:
            logger.error(f"✗ Startup health checks failed: {e}", exc_info=True)
            raise
        
        startup_success = True
        
        logger.info("=" * 60)
        logger.info("✓ Application started successfully")
        logger.info(f"API docs: http://{settings.api_host}:{settings.api_port}/docs")
        logger.info(f"Health check: http://{settings.api_host}:{settings.api_port}/health")
        logger.info(f"Metrics: http://{settings.api_host}:{settings.api_port}/metrics")
        logger.info("=" * 60)
        
    except Exception as e:
        logger.error(f"✗ Failed to start application: {e}", exc_info=True)
        
        # Cleanup partial initialization
        if hasattr(app.state, 'agent'):
            try:
                await app.state.agent.cleanup()
            except:
                pass
        
        if hasattr(app.state, 'cache'):
            try:
                await app.state.cache.close()
            except:
                pass
        
        raise
    
    yield  # Application runs here
    
    # Shutdown
    logger.info("=" * 60)
    logger.info("Shutting down application...")
    
    shutdown_errors = []
    
    try:
        # Cleanup agent resources
        if hasattr(app.state, 'agent'):
            try:
                logger.info("Cleaning up agent...")
                await app.state.agent.cleanup()
                logger.info("✓ Agent cleanup complete")
            except Exception as e:
                logger.error(f"✗ Agent cleanup error: {e}")
                shutdown_errors.append(f"Agent: {e}")
        
        # Close cache connections
        if hasattr(app.state, 'cache'):
            try:
                logger.info("Closing cache connections...")
                await app.state.cache.close()
                logger.info("✓ Cache connections closed")
            except Exception as e:
                logger.error(f"✗ Cache close error: {e}")
                shutdown_errors.append(f"Cache: {e}")
        
        # Cleanup database
        try:
            logger.info("Cleaning up database...")
            cleanup_db()
            logger.info("✓ Database cleanup complete")
        except Exception as e:
            logger.error(f"✗ Database cleanup error: {e}")
            shutdown_errors.append(f"Database: {e}")
        
        # Cleanup thread pool executor (for tool adapters)
        try:
            from .tools.tool_adapters import cleanup_executor
            logger.info("Cleaning up thread pool executor...")
            cleanup_executor()
            logger.info("✓ Thread pool cleanup complete")
        except Exception as e:
            logger.warning(f"Thread pool cleanup skipped: {e}")
        
    except Exception as e:
        logger.error(f"✗ Error during shutdown: {e}", exc_info=True)
        shutdown_errors.append(f"General: {e}")
    
    if shutdown_errors:
        logger.warning(f"Shutdown completed with {len(shutdown_errors)} errors:")
        for error in shutdown_errors:
            logger.warning(f"  - {error}")
    else:
        logger.info("✓ Application shutdown complete (clean)")
    
    logger.info("=" * 60)


async def perform_startup_checks(app: FastAPI) -> None:
    """
    Perform critical health checks on startup.
    
    Raises:
        RuntimeError: If critical components fail validation
    """
    checks = []
    critical_failures = []
    
    # Check database connection
    try:
        from .database import check_db_connection, check_tables_exist
        
        if check_db_connection():
            checks.append("Database: ✓")
            
            # Check if tables exist
            if check_tables_exist():
                checks.append("Tables: ✓")
            else:
                checks.append("Tables: ✗")
                critical_failures.append("Required database tables are missing")
                logger.error("✗ Required database tables are missing")
        else:
            checks.append("Database: ✗")
            critical_failures.append("Database connection failed")
            logger.error("✗ Database connection failed")
    except Exception as e:
        logger.error(f"✗ Database check failed: {e}", exc_info=True)
        checks.append("Database: ✗")
        critical_failures.append(f"Database check exception: {e}")
    
    # Check Redis/Cache
    if hasattr(app.state, 'cache') and app.state.cache.enabled:
        try:
            if await app.state.cache.ping():
                checks.append("Redis Cache: ✓")
            else:
                checks.append("Redis Cache: ✗")
                logger.warning("✗ Redis cache unavailable")
        except Exception as e:
            logger.warning(f"✗ Redis check failed: {e}")
            checks.append("Redis Cache: ✗")
    
    # Check agent tools
    if hasattr(app.state, 'agent'):
        agent = app.state.agent
        tool_count = len(agent.tools)
        checks.append(f"Agent Tools: {tool_count}")
        
        if tool_count == 0:
            logger.warning("⚠ No tools were initialized for the agent")
        
        # Check session store
        session_store_type = type(agent.session_store).__name__
        checks.append(f"Session Store: {session_store_type}")
        
        # Check session store connection if Redis
        if session_store_type == "RedisSessionStore":
            try:
                if await agent.session_store.ping():
                    checks.append("Session Store Redis: ✓")
                else:
                    checks.append("Session Store Redis: ✗")
                    logger.warning("✗ Session store Redis unavailable")
            except Exception as e:
                logger.warning(f"✗ Session Store Redis check failed: {e}")
                checks.append("Session Store Redis: ✗")
        
        # Check distributed locking if enabled
        if agent.lock_manager:
            try:
                # Test lock acquisition
                test_lock = agent.lock_manager.get_lock("startup_test", timeout=5)
                await test_lock.acquire()
                await test_lock.release()
                checks.append("Distributed Locking: ✓")
            except Exception as e:
                logger.warning(f"✗ Distributed locking check failed: {e}")
                checks.append("Distributed Locking: ✗")
    
    # Log all checks
    logger.info(f"Startup checks: {', '.join(checks)}")
    
    # Fail startup if critical components are not ready
    if critical_failures:
        error_msg = f"Critical startup checks failed: {'; '.join(critical_failures)}"
        logger.error(f"✗ {error_msg}")
        raise RuntimeError(error_msg)


async def add_sample_knowledge(agent: CustomerSupportAgent) -> None:
    """Add sample documents to knowledge base for development."""
    try:
        rag_tool = agent.tools.get('rag')
        if not rag_tool:
            logger.debug("RAG tool not available, skipping sample knowledge")
            return
        
        sample_docs = [
            "Welcome to our customer support! We're available 24/7 to help you.",
            "To reset your password: 1. Click 'Forgot Password' 2. Enter your email 3. Check your inbox 4. Follow the reset link.",
            "Our refund policy: Full refunds are available within 30 days of purchase for unused items in original condition.",
            "Shipping information: Standard shipping takes 3-5 business days. Express shipping takes 1-2 business days.",
            "Account verification requires: Valid email address, phone number, and government-issued ID for certain features.",
            "Technical support hours: Available 24/7 via chat. Phone support available Mon-Fri 9AM-6PM EST.",
            "Premium membership benefits: Free shipping, priority support, exclusive discounts, early access to sales.",
            "Payment methods accepted: Credit cards (Visa, MasterCard, Amex), PayPal, Apple Pay, Google Pay.",
            "Order tracking: Use your order number on our tracking page or contact support for assistance.",
            "Data privacy: We encrypt all personal data and never share information with third parties without consent."
        ]
        
        # Add documents using sync method (it's fine for initialization)
        result = rag_tool.add_documents(sample_docs)
        
        if isinstance(result, dict):
            doc_count = result.get('documents_added', 0)
        else:
            doc_count = len(sample_docs)
        
        logger.info(f"✓ Added {doc_count} sample documents to knowledge base")
        
    except Exception as e:
        logger.warning(f"Failed to add sample knowledge: {e}")


# Create FastAPI application
app = FastAPI(
    title=settings.app_name,
    version=settings.app_version,
    description="AI-powered customer support system with RAG, memory, and intelligent escalation",
    lifespan=lifespan,
    docs_url="/docs" if settings.debug else None,
    redoc_url="/redoc" if settings.debug else None,
    openapi_url="/openapi.json" if settings.debug else None
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    expose_headers=["X-Request-ID", "X-Process-Time", "X-RateLimit-Limit"]
)

# Add custom middleware (order matters - applied in reverse)
app.add_middleware(ErrorHandlingMiddleware)
app.add_middleware(RequestIDMiddleware)
app.add_middleware(TimingMiddleware)
if settings.rate_limit_enabled:
    app.add_middleware(
        RateLimitMiddleware,
        calls=settings.rate_limit_requests,
        period=settings.rate_limit_period
    )

# Include API routes
app.include_router(
    health.router,
    prefix="/health",
    tags=["Health"]
)

app.include_router(
    sessions.router,
    prefix=f"{settings.api_prefix}/sessions",
    tags=["Sessions"]
)

app.include_router(
    chat.router,
    prefix=f"{settings.api_prefix}/chat",
    tags=["Chat"]
)

# Add WebSocket endpoint - FIXED: Use add_api_websocket_route
try:
    app.add_api_websocket_route(
        "/ws",
        websocket_endpoint,
        name="websocket"
    )
    logger.info("✓ WebSocket endpoint registered at /ws")
except AttributeError:
    # Fallback for older FastAPI versions
    from fastapi import WebSocket
    
    @app.websocket("/ws")
    async def websocket_route(websocket: WebSocket):
        await websocket_endpoint(websocket)
    
    logger.info("✓ WebSocket endpoint registered at /ws (fallback method)")


# Root endpoint
@app.get("/", tags=["Root"])
async def root() -> Dict[str, Any]:
    """
    Root endpoint with API information.
    
    Returns:
        API information and status
    """
    session_store_type = "Unknown"
    session_stats = {}
    
    if hasattr(app.state, 'agent') and hasattr(app.state.agent, 'session_store'):
        session_store_type = type(app.state.agent.session_store).__name__
        try:
            session_stats = await app.state.agent.session_store.get_stats()
        except Exception as e:
            logger.warning(f"Failed to get session stats: {e}")
            session_stats = {"error": str(e)}
    
    return {
        "name": settings.app_name,
        "version": settings.app_version,
        "environment": settings.environment,
        "status": "operational",
        "docs": "/docs" if settings.debug else "disabled",
        "health": "/health",
        "metrics": "/metrics" if settings.enable_telemetry else "disabled",
        "websocket": "/ws",
        "session_store": session_store_type,
        "session_stats": session_stats,
        "features": {
            "distributed_locking": settings.session_locking_enabled,
            "fingerprinting": settings.session_fingerprinting_enabled,
            "encryption": settings.session_encryption_enabled,
            "l1_cache": settings.session_l1_cache_enabled
        },
        "stats": metrics_collector.get_stats()
    }


# Global exception handler
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception) -> JSONResponse:
    """Handle uncaught exceptions gracefully."""
    request_id = getattr(request.state, "request_id", "unknown")
    
    # Special handling for database errors
    if "no such table" in str(exc):
        logger.error(
            f"Database table error in request {request_id}: {exc}",
            exc_info=True,
            extra={
                "path": request.url.path,
                "method": request.method,
                "client": request.client.host if request.client else "unknown"
            }
        )
        
        # Try to recover by checking database state
        try:
            from .database import check_tables_exist
            if not check_tables_exist():
                logger.error("✗ Database tables are missing - initialization issue detected")
        except Exception as db_check_error:
            logger.error(f"Failed to check database state: {db_check_error}")
        
        metrics_collector.record_error()
        
        return JSONResponse(
            status_code=500,
            content={
                "error": "Database configuration error",
                "message": "The application database is not properly initialized",
                "request_id": request_id,
                "support": "Please contact support if this persists"
            }
        )
    
    # Standard error handling for other exceptions
    logger.error(
        f"Unhandled exception in request {request_id}: {exc}",
        exc_info=True,
        extra={
            "path": request.url.path,
            "method": request.method,
            "client": request.client.host if request.client else "unknown"
        }
    )
    
    metrics_collector.request_id = getattr(request.state, "request_id", "unknown")
    metrics_collector.record_error()
    
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal server error",
            "message": str(exc) if settings.debug else "An unexpected error occurred",
            "request_id": request_id,
            "support": "Please contact support if this persists"
        }
    )


if __name__ == "__main__":
    import uvicorn
    
    # Ensure logs directory exists
    log_dir.mkdir(exist_ok=True)
    
    # Run with uvicorn
    uvicorn.run(
        "app.main:app",
        host=settings.api_host,
        port=settings.api_port,
        reload=settings.debug,
        log_level="debug" if settings.debug else "info",
        access_log=True,
        use_colors=True
    )
